---
# ServiceAccount используется для управления правами доступа к API Kubernetes для пода, который будет выполнять роль NFS-провижинера
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nfs-client-provisioner
  namespace: kube-system
---
# Определяется ClusterRole , который предоставляет права доступа к различным ресурсам Kubernetes
# Эти права нужны для работы NFS-провижинера, чтобы он мог динамически создавать и управлять томами
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-client-provisioner-runner
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "update", "patch"]
---
# Привязывает ClusterRole (nfs-client-provisioner-runner) к ServiceAccount (nfs-client-provisioner)
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: run-nfs-client-provisioner
subjects:
  - kind: ServiceAccount
    name: nfs-client-provisioner
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: nfs-client-provisioner-runner
  apiGroup: rbac.authorization.k8s.io
---
# Определяется Role, которая предоставляет права доступа к ресурсам endpoints в пространстве имен kube-system
# Эти права нужны для реализации механизма "лидера" (leader election), чтобы обеспечить корректную работу нескольких экземпляров провижинера (если они запущены)
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: leader-locking-nfs-client-provisioner
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
# Привязывает Role (leader-locking-nfs-client-provisioner) к ServiceAccount (nfs-client-provisioner).
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: leader-locking-nfs-client-provisioner
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: nfs-client-provisioner
roleRef:
  kind: Role
  name: leader-locking-nfs-client-provisioner
  apiGroup: rbac.authorization.k8s.io
---
# Provisioner : Указывает, что этот StorageClass будет использовать NFS-провижинер (kryukov.local/nfs).
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: managed-nfs-storage
provisioner: gapeev.local/nfs
parameters:
  # При удалении PVC соответствующий PV также будет удален.
  onDelete: delete
  # При удалении тома данные на NFS не будут архивироваться (будут удалены).
  archiveOnDelete: "false"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nfs-client-provisioner
  namespace: kube-system
  labels:
    app: nfs-client-provisioner
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: nfs-client-provisioner
  template:
    metadata:
      labels:
        app: nfs-client-provisioner
    spec:
      serviceAccountName: nfs-client-provisioner
      containers:
        - name: nfs-client-provisioner
          # image: gcr.io/k8s-staging-sig-storage/nfs-subdir-external-provisioner
          image: "{{ nfsServerContainer }}"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: nfs-client-root
              mountPath: /persistentvolumes
          env:
            - name: PROVISIONER_NAME
              value: gapeev.local/nfs
            - name: NFS_SERVER
              value: "{{ nfsServerHost }}"
            - name: NFS_PATH
              value: "{{ nfsServerPath }}"
      volumes:
        - name: nfs-client-root
          nfs:
            server: "{{ nfsServerHost }}"
            path: "{{ nfsServerPath }}"
