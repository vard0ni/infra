ansible_python_interpreter: /usr/bin/python3

# Kubernetes параметры

imageRepository: registry.k8s.io

# Enable dockerhub mirror
dockerhubMirror: false
dockerhubMirrorURLs: 
  - "https://mirror.gcr.io/v2"
  - "https://daocloud.io/v2"

# Versions: 1.28 - 1.32.3
# https://kubernetes.io/releases/
kube_version: 1.32.2

kube_domain_name: cluster.local
service_cidr: "10.233.0.0/18"
pod_network_cidr: "10.233.64.0/18"


# CRI parameters  
# crio или containerd
cri: containerd

# Указать путь к сокету.
# containerd
cri_socket: unix:///run/containerd/containerd.sock
# crio
# cri_socket: unix:///var/run/crio/crio.sock

# Sanbox image
# sandbox_image: "registry.k8s.io/pause:3.10"


# CNI 
cni: calico

# calico
# One of: IPIP, VXLAN, IPIPCrossSubnet, VXLANCrossSubnet, None
# Work only install without eBPF
encapsulation: "IPIPCrossSubnet"
# https://github.com/projectcalico/calico
tigera_operator_version: v3.29.2
tigera_operator_github_url: "https://raw.githubusercontent.com/projectcalico/calico/"
calicoctl_url: "https://github.com/projectcalico/calico/releases/download/"
### To install ePBF uncomment
# enableBPF: yes

# Kubelet configuration
## Reserve resources for OS system daemons.
system_reserved: true
system_memory_reserved: 512Mi
system_cpu_reserved: 500m
## system_ephemeral_storage_reserved: 5Gi
## Default: "10Mi"
container_log_max_size: 1Mi
## Default: 5
container_log_max_files: 3

# It is advisable not to change.
kubectl_config: /etc/kubernetes/admin.conf
kubeadmin_config: /etc/kubernetes/kubeadm.conf

# nodelocaldns
# https://github.com/kubernetes/dns
nodelocaldns_image: "registry.k8s.io/dns/k8s-dns-node-cache:1.23.1"
## Change only if this IP is already taken.
nodelocaldns_local_ip: 169.254.25.10

## HA cluser
# If you need disable HA, undefine ha_cluster_virtual_ip
ha_cluster_virtual_ip: 192.168.118.130
ha_cluster_virtual_port: 7443

### Helm
### Install only on 1-st control node
### Comment out the line if you don't want to install the application.
# helmVersion: v3.17.1



# UTILS                               
# Запускается как отдельный playbook    
# ansible-playbook services/06-utils.yaml


### Priority Classes
priorityClassesEnable: true
priorityClasses:
  - name: high-priority
    value: 2000000
    globalDefault: "false"
    description: "System components. Like a pv, controllers, docker registry etc"
  - name: medium-priority
    value: 1005000
    globalDefault: "false"
    description: "Application productive env"
  - name: low-priority
    value: 1000000
    globalDefault: "false"
    description: "CI|CD components"

### Metrics server
### https://github.com/kubernetes-sigs/metrics-server
metricsServerEnable: true
metricsServerImage: "gcr.io/k8s-staging-metrics-server/metrics-server:v0.7.2"

### Nfs provisioner
### https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner
nfsEnable: false
nfsServerContainer: "gcr.io/k8s-staging-sig-storage/nfs-subdir-external-provisioner@sha256:b1450f94a3610b9fb1cc9cb29ef528b7b5608db6f17a039ea9ba73f0aca0d1a2"
nfsServerHost: "192.168.118.10"
nfsServerPath: "/volume1/nfs"

### MetalLB
### https://metallb.universe.tf/
### Важно! Перед использованием заказать кластерные IP адреса,
### которые будут переданы в управление MetalLB.
metallbEnable: true
metallbChartVersion: "v0.14.9"
# Массив IP адресов, сетей и/или диапазонов IP
metallbAddresses:
- 192.168.118.140-192.168.118.145

### Cert-manager 
### https://github.com/cert-manager/cert-manager
certManagerEnable: false
certManagerVersion: "v1.17.1"

### Ingress controller
### https://github.com/kubernetes/ingress-nginx
### TODO: add helm chart
ingressControllerEnable: false
ingressControllerChartVersion: "4.12.0"
ingressControllerClassName: "system-ingress"
ingressControllerServiceType: "LoadBalancer"
ingressControllerReplicaCount: 1

### ArgoCD
### https://github.com/argoproj/argo-cd
argoCDEnable: false
argoCDChartVersion: "7.8.7"
### debug, info, warn or error
argoCDLoglevel: "info"
argoCDControllerReplicaCount: 1
argoCDServerReplicaCount: 1
argoCDURL: "argocd.gapeev.local"
### -- Bcrypt hashed admin password
### Argo expects the password in the secret to be bcrypt hashed. You can create this hash with
### ARGO_PWD=password
### htpasswd -nbBC 10 "" $ARGO_PWD | tr -d ':\n' | sed 's/$2y/$2a/'
argoCDAdminPassword: "$2a$10$L8OqGEFh3a0yxwfIha4DLuyq6GIYP119hlFM5wlSEsI.nviVAv/zq"
### Default: false
### https://argo-cd.readthedocs.io/en/latest/user-guide/diff-strategies/#server-side-diff
argoCDEnableServerSideDiff: "true"
### Возможные значения: annotation, label, annotation+label 
### https://argo-cd.readthedocs.io/en/latest/user-guide/resource_tracking/#additional-tracking-methods-via-an-annotation
### (default: label)
argoCDTrackingMethod: "annotation"
### Ignoring RBAC changes made by AggregateRoles
### https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#ignoring-rbac-changes-made-by-aggregateroles
argoCDIgnoreAggregateRoles: "true"
